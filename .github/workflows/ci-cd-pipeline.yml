name: CI/CD Pipeline - Online Bookstore

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
    
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libzmq3-dev
         
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Unit Tests
        run: |
          python -m pytest test_app.py -v --tb=short --color=yes
      
      - name: Generate Unit Test Coverage Report
        run: |
          python -m pytest test_app.py --cov=app --cov=models --cov-report=xml --cov-report=term
      
      - name: Upload Unit Test Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: unit-test-coverage
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests  # Only run if unit tests pass
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run Integration Tests
        run: |
          python -m pytest test_integration.py -v --tb=short --color=yes
      
      - name: Generate Integration Test Coverage Report
        run: |
          python -m pytest test_integration.py --cov=app --cov=models --cov-report=xml --cov-report=term
      
      - name: Upload Integration Test Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: integrationtests
          name: integration-test-coverage
          fail_ci_if_error: false

  deploy:
    name: Mock Deployment
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]  # Only run if both test suites pass
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Simulate Deploy to Test Environment
        run: |
          echo "================================"
          echo "  MOCK DEPLOYMENT TO STAGING"
          echo "================================"
          echo ""
          echo "Deployment Details:"
          echo "  • Branch: ${{ github.ref_name }}"
          echo "  • Commit: ${{ github.sha }}"
          echo "  • Author: ${{ github.actor }}"
          echo "  • Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          echo "Deployment Steps:"
          echo "  Code checkout complete"
          echo "  Dependencies installed"
          echo "  Pre-deployment checks passed"
          echo "  Deployment package created"
          echo "  Application deployed to staging"
          echo ""
          echo "Mock Staging URL: https://staging-bookstore-${GITHUB_SHA:0:7}.example.com"
          echo ""
          echo "================================"
          echo "  DEPLOYMENT SUCCESSFUL! "
          echo "================================"
      
      - name: Deployment summary
        run: |
          echo "## Deployment Summary " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Staging (Mock)" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "-  Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          echo "-  Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
          echo "-  Smoke Tests: Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment URL" >> $GITHUB_STEP_SUMMARY
          echo " [Staging Environment](https://staging-bookstore-${GITHUB_SHA:0:7}.example.com)" >> $GITHUB_STEP_SUMMARY

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, deploy]
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo "================================"
          echo "  CI/CD PIPELINE COMPLETED "
          echo "================================"
          echo ""
          echo "All stages completed successfully:"
          echo "  Unit Tests"
          echo "  Integration Tests"
          echo "  Mock Deployment"
          echo ""
          echo "Commit ${{ github.sha }} is ready for production!"
          echo "================================"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, deploy]
    if: failure()
    
    steps:
      - name: Failure notification
        run: |
          echo "================================"
          echo "  CI/CD PIPELINE FAILED"
          echo "================================"
          echo ""
          echo "One or more stages failed."
          echo "Please review the workflow logs above."
          echo ""
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "================================"